{"version":3,"sources":["components/Home.js","components/Exercises.js","components/Recipes.js","Redux/reducer.js","components/SuprSkrtLogin.js","components/Header.js","App.js","serviceWorker.js","Redux/store.js","index.js"],"names":["Home","Component","Exercises","Recipes","initialState","isAuthenticated","user","USER_LOGGED_IN","USER_LOGGED_OUT","SuprSkrtLogin","state","email","password","errorMessage","handleChange","e","target","name","value","setState","handleKeyPress","key","loginUser","axios","post","then","response","props","userLoggedIn","data","history","push","catch","error","console","log","placeholder","onChange","this","type","onClick","withRouter","connect","payload","Header","to","App","exact","path","component","Boolean","window","location","hostname","match","createStore","action","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAeeA,E,iLATP,OACI,6BAEI,wD,GALGC,aCQJC,E,iLARP,OACI,8C,GAHYD,aCUTE,E,iLARP,OACI,4C,GAHUF,a,0lBCFtB,IAAMG,EAAe,CACjBC,iBAAiB,EACjBC,KAAM,IAGJC,EAAiB,iBACjBC,EAAkB,kB,ICAlBC,E,2MAEFC,MAAQ,CACJC,MAAO,GACPC,SAAU,GACVC,aAAc,I,EAGlBC,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAlBC,EADU,EACVA,KAAMC,EADI,EACJA,MACZ,EAAKC,SAAL,eACKF,EAAOC,K,EAIhBE,eAAiB,SAAAL,GACA,SAATA,EAAEM,KACF,EAAKC,a,EAIbA,UAAY,WACRC,IAAMC,KAAK,cAAe,EAAKd,OAAOe,MAAK,SAAAC,GACvC,EAAKC,MAAMC,aAAaF,EAASG,MACjC,EAAKF,MAAMG,QAAQC,KAAK,QACzBC,OAAO,SAAAC,GACNC,QAAQC,IAAIF,GACZ,EAAKd,SAAS,CACVN,aAAcoB,EAAMP,SAASG,W,wEAMrC,OACI,6BACI,qCACA,oCACA,2BAAOO,YAAY,QAAQnB,KAAK,QAAQoB,SAAUC,KAAKxB,aAAcI,MAAOoB,KAAK5B,MAAMC,QACvF,uCACA,2BAAOyB,YAAY,WAAWnB,KAAK,WAAWsB,KAAK,WAAWF,SAAUC,KAAKxB,aAAcI,MAAOoB,KAAK5B,MAAME,WAC7G,4BAAQ4B,QAASF,KAAKhB,WAAtB,c,GAzCYrB,aAqDbwC,kBAAWC,aAN1B,SAA0BhC,GACtB,MAAO,CACHJ,KAAMI,EAAMJ,QAI+B,CAAEsB,aDrC9C,SAAuBtB,GAC1B,MAAO,CACHiC,KAAMhC,EACNoC,QAASrC,KCkCSoC,CAA2CjC,ICxDhDmC,E,iLAEb,OACI,6BACI,6BACI,4CAEJ,6BACI,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,QAAJ,KACA,4BAAI,kBAAC,IAAD,CAAMA,GAAG,cAAT,cACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,WAAJ,Y,GAXY5C,aC6BrB6C,E,iLAhBX,OACE,6BACE,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IACjC,kBAAC,IAAD,CAAOgD,KAAK,UAAUC,UAAWxC,IACjC,kBAAC,IAAD,CAAOuC,KAAK,aAAaC,UAAW/C,IACpC,kBAAC,IAAD,CAAO8C,KAAK,WAAWC,UAAW9C,W,GAZ5BF,aCAEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCfSC,eLKA,WAAgD,IAA/B7C,EAA8B,uDAAtBN,EAAcoD,EAAQ,uCAC1D,OAAQA,EAAOjB,MAEX,KAAKhC,EACD,OAAO,EAAP,GAAYG,EAAZ,CAAmBL,iBAAiB,EAAMC,KAAMkD,EAAOb,UAE3D,KAAKnC,EACD,OAAO,EAAP,GAAYE,EAAZ,CAAmBL,iBAAiB,EAAOC,KAAM,KAErD,QACI,OAAOI,MMVnB+C,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAQA,GACd,kBAAC,EAAD,OACSC,SAASC,eAAe,SFsHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.cddd2ca8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// import Header from './Header';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                {/* <Header /> */}\n                <h1>Placeholder Content</h1>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react'\n\nclass Exercises extends Component {\n    render() {\n        return (\n            <div>\n                Exercises\n            </div>\n        )\n    }\n}\n\nexport default Exercises;","import React, { Component } from 'react'\n\nclass Recipes extends Component {\n    render() {\n        return (\n            <div>\n                Recipes\n            </div>\n        )\n    }\n}\n\nexport default Recipes;\n","const initialState = {\n    isAuthenticated: false,\n    user: {},\n}\n\nconst USER_LOGGED_IN = 'USER_LOGGED_IN';\nconst USER_LOGGED_OUT = 'USER_LOGGED_OUT';\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type)\n    {\n        case USER_LOGGED_IN:\n            return { ...state, isAuthenticated: true, user: action.payload };\n\n        case USER_LOGGED_OUT:\n            return { ...state, isAuthenticated: false, user: {} };\n\n        default:\n            return state;\n    }\n}\n\nexport function userLoggedIn (user) {\n    return {\n        type: USER_LOGGED_IN,\n        payload: user,\n    }\n}\n\nexport function userLoggedOut () {\n    return {\n        type: USER_LOGGED_OUT,\n    }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { userLoggedIn } from '../Redux/reducer';\nimport { withRouter } from 'react-router-dom';\n\nclass SuprSkrtLogin extends Component {\n\n    state = {\n        email: '',\n        password: '',\n        errorMessage: '',\n    }\n\n    handleChange = e => {\n        let { name, value } = e.target;\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    handleKeyPress = e => {\n        if (e.key == 'Enter') {\n            this.loginUser();\n        }\n    }\n\n    loginUser = () => {\n        axios.post('/auth/login', this.state).then(response => {\n            this.props.userLoggedIn(response.data);\n            this.props.history.push('/');\n        }).catch( error => {\n            console.log(error);\n            this.setState({\n                errorMessage: error.response.data\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <p>Email</p>\n                <input placeholder='email' name='email' onChange={this.handleChange} value={this.state.email} />\n                <p>Password</p>\n                <input placeholder='password' name='password' type='password' onChange={this.handleChange} value={this.state.password} />\n                <button onClick={this.loginUser} >Login</button>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps (state) {\n    return {\n        user: state.user\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, { userLoggedIn })(SuprSkrtLogin));","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div>\n                <div>\n                    <p>Health by KB</p>\n                </div>\n                <div>\n                    <ul>\n                        <li><Link to='/' >Home</Link> </li>\n                        <li><Link to='/exercises' >Exercises</Link></li>\n                        <li><Link to='/recipes' >Recipes</Link> </li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\n\n// Components\nimport Home from './components/Home';\nimport Exercises from './components/Exercises';\nimport Recipes from './components/Recipes';\nimport SuprSkrtLogin from './components/SuprSkrtLogin';\nimport Header from './components/Header';\n\nclass App extends Component {\n  \n  render() {\n    \n    return (\n      <div>\n        <HashRouter>\n        <Header />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/secret' component={SuprSkrtLogin} />\n            <Route path='/exercises' component={Exercises} />\n            <Route path='/recipes' component={Recipes} />\n          </Switch>\n        </HashRouter> \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport default createStore(reducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}